(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{203:function(t,a,v){"use strict";v.r(a);var _=v(3),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h3",{attrs:{id:"并发控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#并发控制"}},[t._v("#")]),t._v(" 并发控制")]),t._v(" "),v("h4",{attrs:{id:"读写锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#读写锁"}},[t._v("#")]),t._v(" 读写锁")]),t._v(" "),v("p",[t._v("共享锁(shared lock)也叫读锁(read lock)")]),t._v(" "),v("p",[t._v("排它锁(exclusive lock)也叫写锁(write lock)")]),t._v(" "),v("h4",{attrs:{id:"锁粒度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#锁粒度"}},[t._v("#")]),t._v(" 锁粒度")]),t._v(" "),v("h5",{attrs:{id:"表锁-table-lock"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#表锁-table-lock"}},[t._v("#")]),t._v(" 表锁（table lock）")]),t._v(" "),v("p",[t._v("表锁是mysql中最基本的锁策略，并且是开销最小的策略。它会锁整张表。一个用户在对表进行写操作（插入、删除、更新等）前，需要先获取写锁，这会阻塞其他用户对该表的所有读写操作。只有没有写锁时，其他用户才能获取读锁，读锁是不互相阻塞的。")]),t._v(" "),v("h5",{attrs:{id:"行级锁-row-lock"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#行级锁-row-lock"}},[t._v("#")]),t._v(" 行级锁（row lock)")]),t._v(" "),v("p",[t._v("行级锁可以最大程度的支持并发处理（同时也带来了最大的锁开销。）")]),t._v(" "),v("h4",{attrs:{id:"事务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[t._v("#")]),t._v(" 事务")]),t._v(" "),v("p",[t._v("事务是一组原子性的sql查询，事务内的语句，要么全部执行成功，要么全部执行失败。")]),t._v(" "),v("p",[t._v("一个运行良好的事务处理系统，必须具备这些标准特征。ACID表示原子性（atomicity）、一致性（consistency）、隔离性（isolation）和持久性（durability）")]),t._v(" "),v("h5",{attrs:{id:"原子性-atomicity"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#原子性-atomicity"}},[t._v("#")]),t._v(" 原子性（atomicity）")]),t._v(" "),v("p",[t._v("​\t一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中一部分操作，这就是事务的原子性。")]),t._v(" "),v("h5",{attrs:{id:"一致性-consistency"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一致性-consistency"}},[t._v("#")]),t._v(" 一致性（consistency）")]),t._v(" "),v("p",[t._v("​\t数据库总是从一个一致性的状态转换到另一个一致性的状态。")]),t._v(" "),v("h5",{attrs:{id:"隔离性-isolation"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#隔离性-isolation"}},[t._v("#")]),t._v(" 隔离性（isolation）")]),t._v(" "),v("p",[t._v("​\t通常来说，一个事务所作的修改在最终提交以前，对其他事务是不可见的。")]),t._v(" "),v("h5",{attrs:{id:"持久性-durability"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#持久性-durability"}},[t._v("#")]),t._v(" 持久性（durability）")]),t._v(" "),v("p",[t._v("​\t一旦事务提交，则其所做的修改就会永久的保存到数据库中。")]),t._v(" "),v("h4",{attrs:{id:"隔离级别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#隔离级别"}},[t._v("#")]),t._v(" 隔离级别")]),t._v(" "),v("p",[t._v("sql标准中定义了四种隔离级别，每一种级别都规定了一个事务中所做的修改，哪些在事务内和事务间是可见的，哪些是不可见的。较低级别的隔离通常可以执行更高的并发，系统的开销也更低")]),t._v(" "),v("h5",{attrs:{id:"read-uncommitted-未提交读"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#read-uncommitted-未提交读"}},[t._v("#")]),t._v(" READ UNCOMMITTED（未提交读）")]),t._v(" "),v("p",[t._v("​\t在 READ UNCOMMITTED 级别，事务中的修改，即使没有提交，对其他事务也是可见的。事务可以读取未提交的数据，这也成为脏读（Dirty Read）。这个级别会导致很多问题，从性能上来说 READ UNCOMMITTED 不会比其他级别好太多，但却缺乏其他级别的好处，除非真的有非常必要的理由，在实际应用中一般很少使用。")]),t._v(" "),v("h5",{attrs:{id:"read-committed-提交读"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#read-committed-提交读"}},[t._v("#")]),t._v(" READ COMMITTED（提交读）")]),t._v(" "),v("p",[t._v("​\t大多数的数据库系统默认的隔离级别都是READ COMMITTED（但mysql不是）。READ COMMITTED满足前面提到的隔离性的简单定义：一个事务开始是，只能”看见“已经提交的事务所做的修改。也就是说，一个事务从开始到提交前，所作的任何修改对其他事务都是不可见的。这个级别有时候也叫不可重复读（nonrepeatable read），因为两次执行同样的查询，可能会得到不一样的结果。")]),t._v(" "),v("h5",{attrs:{id:"repeatable-read-可重复读"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#repeatable-read-可重复读"}},[t._v("#")]),t._v(" REPEATABLE READ（可重复读）")]),t._v(" "),v("p",[t._v("​\tREPEATABLE READ 解决的脏读的问题。该级别保证了在同一个事务中多次读取同样记录的结果是一致的。理论上，可重复读隔离级别还有无法解决的另一个幻读（Phantom Read）的问题。所谓幻读，指的是当某个事务在读取某个范围的记录时，会产生幻行（Phantom Row）。InnoDB存储引擎通过多版本并发控制（MVCC Multiversion Concurrency Control）解决的幻读的问题。可重复是mysql的默认隔离级别")]),t._v(" "),v("h5",{attrs:{id:"serializable-可串行化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#serializable-可串行化"}},[t._v("#")]),t._v(" SERIALIZABLE（可串行化）")]),t._v(" "),v("p",[t._v("​\tSERIALIZABLE是最高的隔离级别。它强制强制控制事务串行化执行，避免了前面说的幻读的问题。简单来说，SERIALIZABLE会在读取的每一行数据上都加锁，所有可能导致大量的超时和锁争用的问题。实际应用中也很少用到这个隔离级别，只有在非常需要确保数据一致性而且可以接受没有并发的情况下，才考虑采用该级别。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("隔离级别")]),t._v(" "),v("th",[t._v("脏读可能性")]),t._v(" "),v("th",[t._v("不可重复度可能性")]),t._v(" "),v("th",[t._v("幻读可能性")]),t._v(" "),v("th",[t._v("加锁读")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("READ UNCOMMITTED")]),t._v(" "),v("td",[t._v("yes")]),t._v(" "),v("td",[t._v("yes")]),t._v(" "),v("td",[t._v("yes")]),t._v(" "),v("td",[t._v("no")])]),t._v(" "),v("tr",[v("td",[t._v("READ COMMITTED")]),t._v(" "),v("td",[t._v("no")]),t._v(" "),v("td",[t._v("yes")]),t._v(" "),v("td",[t._v("yes")]),t._v(" "),v("td",[t._v("no")])]),t._v(" "),v("tr",[v("td",[t._v("REPEATABLE READ")]),t._v(" "),v("td",[t._v("no")]),t._v(" "),v("td",[t._v("no")]),t._v(" "),v("td",[t._v("yes")]),t._v(" "),v("td",[t._v("no")])]),t._v(" "),v("tr",[v("td",[t._v("SERIALIZABLE")]),t._v(" "),v("td",[t._v("no")]),t._v(" "),v("td",[t._v("no")]),t._v(" "),v("td",[t._v("no")]),t._v(" "),v("td",[t._v("yes")])])])]),t._v(" "),v("h4",{attrs:{id:"死锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#死锁"}},[t._v("#")]),t._v(" 死锁")]),t._v(" "),v("p",[t._v("死锁是指两个或多个事务在同一资源上相互占用，并请求锁定占用对方的资源，从而导致恶行循环的现象。当多个事务试图以不同的顺序占用锁定资源时，就可能产生死锁。InnoDB目前处理死锁的方法是，将持有最少行级排他锁的事务进行回滚（这是相对比较简单的死锁回滚算法）。")]),t._v(" "),v("h4",{attrs:{id:"事务日志"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事务日志"}},[t._v("#")]),t._v(" 事务日志")]),t._v(" "),v("p",[t._v("事务日志可以帮助提交事务的效率。使用事务日志，存储引擎在修改表的数据时只需要修改其内存拷贝，再把该修改行为记录到持久在硬盘的事务日志中，而不用每次都将修改的数据持久到磁盘。事务日志采用的是追加的方式，因为写日志操作是磁盘上一小块区域内的顺序IO，而不像随机IO需要多个地方移动磁头，所以采用事务日志的方式相对来说快得多。")]),t._v(" "),v("p",[t._v("redo_log")]),t._v(" "),v("p",[t._v("undo_log")]),t._v(" "),v("p",[t._v("bin_log")]),t._v(" "),v("h4",{attrs:{id:"mysql中的事务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mysql中的事务"}},[t._v("#")]),t._v(" mysql中的事务")]),t._v(" "),v("p",[t._v("mysql提供了两种事务性存存储引擎：InnoDB和NDB Cluster。")]),t._v(" "),v("h5",{attrs:{id:"自动提交-autocommit"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自动提交-autocommit"}},[t._v("#")]),t._v(" 自动提交（AUTOCOMMIT）")]),t._v(" "),v("p",[t._v("mysql默认采用自动提交（AUTOCOMMIT）模式。可以通过设置 AUTOCOMMIT变量来启用或者禁用自动提交模式。1或者NO表示启用，0或者OFF表示禁用。")]),t._v(" "),v("div",{staticClass:"language-mysql extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("set AUTOCOMMIT=1;#表示启用自动t\n")])])]),v("h5",{attrs:{id:"事务中混合使用存储引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事务中混合使用存储引擎"}},[t._v("#")]),t._v(" 事务中混合使用存储引擎")]),t._v(" "),v("p",[t._v("mysql的服务器层不管理事务，事务是由下层的存储引擎实现。所有在一个事务中使用多种存储引擎是不可靠的。")]),t._v(" "),v("h5",{attrs:{id:"隐式和显式锁定"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#隐式和显式锁定"}},[t._v("#")]),t._v(" 隐式和显式锁定")]),t._v(" "),v("p",[t._v("InnoDB采用的是两阶段锁定协议（two-phase locking protocol）。在事务执行过程中，随时都可以执行锁定，锁只有在COMMIT或者ROLLBACK的时候才会释放，并且所有的锁都是在同一时刻被释放。")]),t._v(" "),v("h4",{attrs:{id:"多版本并发控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多版本并发控制"}},[t._v("#")]),t._v(" 多版本并发控制")]),t._v(" "),v("p",[t._v("mysql的大多数事务性存储引擎实现都不是简单的行级锁。基于提升并发性能的考虑，它们一般都是同时实现了多版本并发控制（MVCC）。")]),t._v(" "),v("p",[t._v("可以认为MVCC是行级锁的一个变种，但是他在很多情况下都避免了加锁操作，因此开销更低。虽然实现机制有所不同，但大多数都实现了非阻塞的读操作，写操作也只锁定必要的行。")]),t._v(" "),v("p",[t._v("MVCC的实现，是通过保存数据在某个时间点的快照来实现的。不管事务执行多长时间，每个事务看到的数据是一直的。根据事务开始的时间不同，每个事务对同一张表，同一时候看到的数据可能不一样的。")]),t._v(" "),v("p",[t._v("InnoDB的MVCC，是通过在每行记录后面保存两个隐藏的列来实现的。这两个列，一个保存了行的创建时间，一个保存行的过期时间（或删除时间）。当然存储的并不是实际的时间值，而是系统的版本好（system verion number）。没开始一个新的事务，系统版本号都会自动递增。事务开始时刻的系统版本号作为事务的版本号，用来和查询到的每行记录版本号比较。")]),t._v(" "),v("p",[t._v("REPEATABLE READ级别")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("SELECT\n\tInnoDB会根据以下两个条件检查每行记录\n\ta.InnoDB只查找版本号早于当前事务版本的记录行（也就是，行的系统版本号小于或等于事务的版本号），这样可以确保事务读取的行，要么是事务开始前已经存在的，要么是事务自身插入或者修改过的。\n\tb.行的删除版本号要么未定义，要么大于当前事务版本号。这样可以确保事务读取到的行，在事务开始前未被删除。\nINSERT\n\tInnoDB为新插入的每一行保存当前系统版本号作为行版本号。\nDELTE\n\tInnoDB为删除的每一行保存当前系统版本号作为删除版本号。\nUPDATE\n\tInnoDB为插入一行的记录，保存当前系统的版本号作为版本号，同时保存当前系统版本号到原版本号作为删除标识。\n")])])]),v("p",[t._v("MVCC只在REPEATABLE READ 和 READ COMMITTED两个隔离级别下工作。其他隔离级别都和MVCC不兼容，因为READ UNCOMMITTED总是读取最新的数据行，而不是符合当前事务版本的数据行。而SERIALZABLE则会对所有读取的行都加锁。")])])}),[],!1,null,null,null);a.default=s.exports}}]);