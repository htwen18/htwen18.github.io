(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{204:function(a,t,r){"use strict";r.r(t);var s=r(3),e=Object(s.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h3",{attrs:{id:"选择优化的数据类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#选择优化的数据类型"}},[a._v("#")]),a._v(" 选择优化的数据类型")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("更小的通常更好\n\t一般情况下，应该尽量使用可以正确存储数据的最小数据类型。更小的数据类型通常更快，因为他们占用更少的磁盘、内存和CPU缓存，并且处理时需要的CPU周期更少。\n简单就好\n\t简单数据类型的操作通常需要更少的CPU周期。\n尽量避免NULL\n")])])]),r("h4",{attrs:{id:"整数类型-whole-number"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#整数类型-whole-number"}},[a._v("#")]),a._v(" 整数类型（whole number）")]),a._v(" "),r("p",[a._v("整数类型：TINYINT，SMALLINT，MEDIUMINT，INT，BIGINT。分别用8，16，24，32，64位存储空间。他们可以存储的值的范围是-2^(N-1)到2(N-1)-1，其中N是存储空间的位数。")]),a._v(" "),r("p",[a._v("mysql可以为整数类型指定宽度，列入INT(11)，对于大多数应用这是没意义的：它不会限制值的合法范围，只是规定了mysql的一些交互工具来显示字符的个数。对于存储和计算来说INT(1)和INT(20)是相同的。")]),a._v(" "),r("h4",{attrs:{id:"实数类型-real-number"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#实数类型-real-number"}},[a._v("#")]),a._v(" 实数类型（real number）")]),a._v(" "),r("p",[a._v("实数是带有小数部分的数字。然而，它们不只是为了存储小数部分；也可以使用DECIMAL存储比BIGINT更大的整数。mysql既支持精确类型，也支持不精确类型。")]),a._v(" "),r("h4",{attrs:{id:"字符串类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符串类型"}},[a._v("#")]),a._v(" 字符串类型")]),a._v(" "),r("h5",{attrs:{id:"varchar和char类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#varchar和char类型"}},[a._v("#")]),a._v(" VARCHAR和CHAR类型")]),a._v(" "),r("p",[a._v("VARCHAR和CHAR是两种主要的字符串类型。如何存储在磁盘和内存中，主要跟存储引擎的实现有关。")]),a._v(" "),r("h5",{attrs:{id:"varchar"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#varchar"}},[a._v("#")]),a._v(" VARCHAR")]),a._v(" "),r("p",[a._v("​\tVARCHAR类型用于存储可变长度字符串，是最常见的字符串数据类型。它不定长类型更节省空间，因为它仅使用必要的空间。有一种例外情况，如果mysql表使用ROW_FORMAT=FIXED创建的话，每一行都会使用定长存储，这会很浪费时间。")]),a._v(" "),r("p",[a._v("​\tVARCHAR使用1或2个额外字节记录字符串的长度：如果列的最大长度小于或等于255字节，使用1个字节表示，否则使用2个字节。")]),a._v(" "),r("p",[a._v("​\tVARCHAR节省了存储空间，所以对性能也有帮助。但是，由于行是可变的，所以在update时可能使行变的比原来更长，这就导致需要做额外的工作。如果一行占用的空间增长，并且在页内没有更多的空间可以存储，在这种情况下，不同的存储引擎的处理方式是不一样的。列入，MyISAM会将行拆成不同的片段存储，InnoDB则需要分裂页来使行可以放进页内。其他的一些存储引擎也许从不在原数据位置更小数据。")]),a._v(" "),r("h5",{attrs:{id:"char"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#char"}},[a._v("#")]),a._v(" CHAR")]),a._v(" "),r("p",[a._v("​\tCHAR类型是定长的：mysql总是根据定义的字符串长度分配足够的空间。当存储CHAR值时，mysql会删除所有的末尾空格。CHAR值会根据需要采用的空格进行填充以方便比较。")])])}),[],!1,null,null,null);t.default=e.exports}}]);